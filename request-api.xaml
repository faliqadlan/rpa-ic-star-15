<Activity mc:Ignorable="sap sap2010" x:Class="Main" this:Main.assReportDown="assignment_report.xlsx" this:Main.biodataReportDown="biodata_report.xlsx" this:Main.in_config_path="data\Config.xlsx" xmlns="http://schemas.microsoft.com/netfx/2009/xaml/activities" xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" xmlns:sap="http://schemas.microsoft.com/netfx/2009/xaml/activities/presentation" xmlns:sap2010="http://schemas.microsoft.com/netfx/2010/xaml/activities/presentation" xmlns:scg="clr-namespace:System.Collections.Generic;assembly=System.Private.CoreLib" xmlns:sco="clr-namespace:System.Collections.ObjectModel;assembly=System.Private.CoreLib" xmlns:sr="clr-namespace:System.Reflection;assembly=System.Private.CoreLib" xmlns:this="clr-namespace:" xmlns:uasb="clr-namespace:UiPath.Activities.System.BPO;assembly=UiPath.System.Activities" xmlns:uasf="clr-namespace:UiPath.Activities.System.FileOperations;assembly=UiPath.System.Activities" xmlns:ue="clr-namespace:UiPath.Excel;assembly=UiPath.Excel.Activities" xmlns:ueab="clr-namespace:UiPath.Excel.Activities.Business;assembly=UiPath.Excel.Activities" xmlns:ui="http://schemas.uipath.com/workflow/activities" xmlns:upr="clr-namespace:UiPath.Platform.ResourceHandling;assembly=UiPath.Platform" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">
  <x:Members>
    <x:Property Name="access_token_arg" Type="InOutArgument(x:String)">
      <x:Property.Attributes>
        <RequiredArgumentAttribute />
      </x:Property.Attributes>
    </x:Property>
    <x:Property Name="profile_token_arg" Type="InOutArgument(x:String)">
      <x:Property.Attributes>
        <RequiredArgumentAttribute />
      </x:Property.Attributes>
    </x:Property>
    <x:Property Name="biodata_report_url_arg" Type="OutArgument(x:String)">
      <x:Property.Attributes>
        <RequiredArgumentAttribute />
      </x:Property.Attributes>
    </x:Property>
    <x:Property Name="assignment_report_url_arg" Type="OutArgument(x:String)">
      <x:Property.Attributes>
        <RequiredArgumentAttribute />
      </x:Property.Attributes>
    </x:Property>
    <x:Property Name="assReportDown" Type="InArgument(x:String)" />
    <x:Property Name="biodataReportDown" Type="InArgument(x:String)" />
    <x:Property Name="user_name" Type="InOutArgument(x:String)">
      <x:Property.Attributes>
        <RequiredArgumentAttribute />
      </x:Property.Attributes>
    </x:Property>
    <x:Property Name="password" Type="InOutArgument(x:String)">
      <x:Property.Attributes>
        <RequiredArgumentAttribute />
      </x:Property.Attributes>
    </x:Property>
    <x:Property Name="in_config_path" Type="InArgument(x:String)">
      <x:Property.Attributes>
        <RequiredArgumentAttribute />
      </x:Property.Attributes>
    </x:Property>
    <x:Property Name="config_path" Type="InArgument(x:String)" />
  </x:Members>
  <VisualBasic.Settings>
    <x:Null />
  </VisualBasic.Settings>
  <sap2010:WorkflowViewState.IdRef>ActivityBuilder_1</sap2010:WorkflowViewState.IdRef>
  <TextExpression.NamespacesForImplementation>
    <sco:Collection x:TypeArguments="x:String">
      <x:String>System.Activities</x:String>
      <x:String>System.Activities.Statements</x:String>
      <x:String>System.Activities.Expressions</x:String>
      <x:String>System.Activities.Validation</x:String>
      <x:String>System.Activities.XamlIntegration</x:String>
      <x:String>Microsoft.VisualBasic</x:String>
      <x:String>Microsoft.VisualBasic.Activities</x:String>
      <x:String>System</x:String>
      <x:String>System.Collections</x:String>
      <x:String>System.Collections.Generic</x:String>
      <x:String>System.Collections.ObjectModel</x:String>
      <x:String>System.Data</x:String>
      <x:String>System.Diagnostics</x:String>
      <x:String>System.Drawing</x:String>
      <x:String>System.IO</x:String>
      <x:String>System.Linq</x:String>
      <x:String>System.Net.Mail</x:String>
      <x:String>System.Xml</x:String>
      <x:String>System.Xml.Linq</x:String>
      <x:String>UiPath.Core</x:String>
      <x:String>UiPath.Core.Activities</x:String>
      <x:String>System.Windows.Markup</x:String>
      <x:String>GlobalVariablesNamespace</x:String>
      <x:String>GlobalConstantsNamespace</x:String>
      <x:String>UiPath.Web</x:String>
      <x:String>UiPath.Platform.ResourceHandling</x:String>
      <x:String>Microsoft.VisualBasic.CompilerServices</x:String>
      <x:String>Newtonsoft.Json.Linq</x:String>
      <x:String>Microsoft.Win32.SafeHandles</x:String>
      <x:String>System.Numerics</x:String>
      <x:String>System.Net</x:String>
      <x:String>System.Globalization</x:String>
      <x:String>System.Configuration.Assemblies</x:String>
      <x:String>System.ComponentModel</x:String>
      <x:String>System.CodeDom.Compiler</x:String>
      <x:String>System.Buffers</x:String>
      <x:String>System.Buffers.Text</x:String>
      <x:String>System.Buffers.Binary</x:String>
      <x:String>System.Threading</x:String>
      <x:String>System.Threading.Tasks</x:String>
      <x:String>System.Threading.Tasks.Sources</x:String>
      <x:String>System.Text</x:String>
      <x:String>System.Text.Unicode</x:String>
      <x:String>System.Security</x:String>
      <x:String>System.Security.Principal</x:String>
      <x:String>System.Security.Permissions</x:String>
      <x:String>System.Security.Cryptography</x:String>
      <x:String>System.Runtime</x:String>
      <x:String>System.Runtime.Serialization</x:String>
      <x:String>System.Runtime.Remoting</x:String>
      <x:String>System.Runtime.ExceptionServices</x:String>
      <x:String>System.Runtime.ConstrainedExecution</x:String>
      <x:String>System.Runtime.Versioning</x:String>
      <x:String>System.Runtime.Loader</x:String>
      <x:String>System.Runtime.Intrinsics</x:String>
      <x:String>System.Runtime.Intrinsics.Wasm</x:String>
      <x:String>System.Runtime.Intrinsics.Arm</x:String>
      <x:String>System.Runtime.Intrinsics.X86</x:String>
      <x:String>System.Runtime.InteropServices</x:String>
      <x:String>System.Runtime.InteropServices.ObjectiveC</x:String>
      <x:String>System.Runtime.InteropServices.Marshalling</x:String>
      <x:String>System.Runtime.InteropServices.ComTypes</x:String>
      <x:String>System.Runtime.CompilerServices</x:String>
      <x:String>System.Resources</x:String>
      <x:String>System.Reflection</x:String>
      <x:String>System.Reflection.Metadata</x:String>
      <x:String>System.Reflection.Emit</x:String>
      <x:String>System.IO.Enumeration</x:String>
      <x:String>System.Diagnostics.SymbolStore</x:String>
      <x:String>System.Diagnostics.Contracts</x:String>
      <x:String>System.Diagnostics.CodeAnalysis</x:String>
      <x:String>System.Diagnostics.Tracing</x:String>
      <x:String>System.Collections.Concurrent</x:String>
      <x:String>Internal</x:String>
      <x:String>System.CodeDom</x:String>
      <x:String>Microsoft.CSharp</x:String>
      <x:String>System.Linq.Expressions</x:String>
      <x:String>System.Linq.Expressions.Interpreter</x:String>
      <x:String>System.Dynamic</x:String>
      <x:String>UiPath.Workflow.Runtime</x:String>
      <x:String>System.Activities.Tracking</x:String>
      <x:String>System.Activities.Statements.Tracking</x:String>
      <x:String>System.Activities.Runtime</x:String>
      <x:String>System.Activities.Runtime.DurableInstancing</x:String>
      <x:String>System.Activities.Runtime.Collections</x:String>
      <x:String>System.Activities.ParallelTracking</x:String>
      <x:String>System.Activities.Hosting</x:String>
      <x:String>System.Activities.Persistence</x:String>
      <x:String>System.Activities.DurableInstancing</x:String>
      <x:String>System.ComponentModel.Design.Serialization</x:String>
      <x:String>System.Text.RegularExpressions</x:String>
      <x:String>Microsoft.VisualBasic.FileIO</x:String>
      <x:String>Newtonsoft.Json</x:String>
      <x:String>System.Collections.Specialized</x:String>
      <x:String>UiPath.Web.Activities</x:String>
      <x:String>UiPath.UIAutomationCore.Contracts</x:String>
      <x:String>UiPath.Platform.SyncObjects</x:String>
      <x:String>UiPath.Activities.System.FileOperations</x:String>
      <x:String>UiPath.IntelligentOCR.StudioWeb.Activities.DataValidation</x:String>
      <x:String>UiPath.IntelligentOCR.StudioWeb.Activities.DataExtraction</x:String>
      <x:String>UiPath.IntelligentOCR.StudioWeb.Activities.DocumentClassification</x:String>
      <x:String>UiPath.DocumentProcessing.Contracts.Actions</x:String>
      <x:String>UiPath.IntelligentOCR.Actions.Abstractions</x:String>
      <x:String>UiPath.UIAutomationNext</x:String>
      <x:String>UiPath.UIAutomationNext.Enums</x:String>
      <x:String>Microsoft</x:String>
      <x:String>UiPath.UIAutomationNext.Models</x:String>
      <x:String>UiPath.UIAutomationNext.Activities</x:String>
      <x:String>UiPath.Shared.Activities</x:String>
      <x:String>UiPath.Platform.ObjectLibrary</x:String>
      <x:String>UiPath.Excel</x:String>
      <x:String>UiPath.Excel.Activities.Business</x:String>
      <x:String>UiPath.Excel.Model</x:String>
      <x:String>UiPath.Excel.Activities</x:String>
      <x:String>System.Xml.Serialization</x:String>
      <x:String>UiPath.Activities.System.BPO</x:String>
    </sco:Collection>
  </TextExpression.NamespacesForImplementation>
  <TextExpression.ReferencesForImplementation>
    <sco:Collection x:TypeArguments="AssemblyReference">
      <AssemblyReference>Microsoft.VisualBasic</AssemblyReference>
      <AssemblyReference>mscorlib</AssemblyReference>
      <AssemblyReference>PresentationCore</AssemblyReference>
      <AssemblyReference>PresentationFramework</AssemblyReference>
      <AssemblyReference>System</AssemblyReference>
      <AssemblyReference>System.Activities</AssemblyReference>
      <AssemblyReference>System.ComponentModel.TypeConverter</AssemblyReference>
      <AssemblyReference>System.Core</AssemblyReference>
      <AssemblyReference>System.Data</AssemblyReference>
      <AssemblyReference>System.Data.Common</AssemblyReference>
      <AssemblyReference>System.Data.DataSetExtensions</AssemblyReference>
      <AssemblyReference>System.Drawing</AssemblyReference>
      <AssemblyReference>System.Drawing.Common</AssemblyReference>
      <AssemblyReference>System.Drawing.Primitives</AssemblyReference>
      <AssemblyReference>System.Linq</AssemblyReference>
      <AssemblyReference>System.Net.Mail</AssemblyReference>
      <AssemblyReference>System.ObjectModel</AssemblyReference>
      <AssemblyReference>System.Private.CoreLib</AssemblyReference>
      <AssemblyReference>System.Xaml</AssemblyReference>
      <AssemblyReference>System.Xml</AssemblyReference>
      <AssemblyReference>System.Xml.Linq</AssemblyReference>
      <AssemblyReference>UiPath.System.Activities</AssemblyReference>
      <AssemblyReference>UiPath.UiAutomation.Activities</AssemblyReference>
      <AssemblyReference>WindowsBase</AssemblyReference>
      <AssemblyReference>UiPath.Web</AssemblyReference>
      <AssemblyReference>UiPath.Platform</AssemblyReference>
      <AssemblyReference>UiPath.Excel.Activities.Design</AssemblyReference>
      <AssemblyReference>System.Memory.Data</AssemblyReference>
      <AssemblyReference>System.Console</AssemblyReference>
      <AssemblyReference>System.Security.Permissions</AssemblyReference>
      <AssemblyReference>System.Configuration.ConfigurationManager</AssemblyReference>
      <AssemblyReference>System.ComponentModel</AssemblyReference>
      <AssemblyReference>System.Memory</AssemblyReference>
      <AssemblyReference>System.Private.Uri</AssemblyReference>
      <AssemblyReference>System.Collections.NonGeneric</AssemblyReference>
      <AssemblyReference>System.Collections</AssemblyReference>
      <AssemblyReference>System.Linq.Async</AssemblyReference>
      <AssemblyReference>System.Private.ServiceModel</AssemblyReference>
      <AssemblyReference>System.IO.FileSystem.Watcher</AssemblyReference>
      <AssemblyReference>System.IO.Packaging</AssemblyReference>
      <AssemblyReference>System.IO.FileSystem.AccessControl</AssemblyReference>
      <AssemblyReference>System.IO.FileSystem.DriveInfo</AssemblyReference>
      <AssemblyReference>System.Linq.Async.Queryable</AssemblyReference>
      <AssemblyReference>System.Linq.Expressions</AssemblyReference>
      <AssemblyReference>System.Linq.Parallel</AssemblyReference>
      <AssemblyReference>System.Collections.Immutable</AssemblyReference>
      <AssemblyReference>System.Linq.Queryable</AssemblyReference>
      <AssemblyReference>Microsoft.VisualBasic.Forms</AssemblyReference>
      <AssemblyReference>Microsoft.VisualBasic.Core</AssemblyReference>
      <AssemblyReference>Newtonsoft.Json</AssemblyReference>
      <AssemblyReference>System.IO.Pipes</AssemblyReference>
      <AssemblyReference>System.Security.Cryptography</AssemblyReference>
      <AssemblyReference>System.Security.Principal.Windows</AssemblyReference>
      <AssemblyReference>System.Diagnostics.Process</AssemblyReference>
      <AssemblyReference>System.IO.MemoryMappedFiles</AssemblyReference>
      <AssemblyReference>Microsoft.Win32.Registry</AssemblyReference>
      <AssemblyReference>System.Runtime.Numerics</AssemblyReference>
      <AssemblyReference>System.Net.Primitives</AssemblyReference>
      <AssemblyReference>System.Net.HttpListener</AssemblyReference>
      <AssemblyReference>System.Net.WebProxy</AssemblyReference>
      <AssemblyReference>System.Net.NameResolution</AssemblyReference>
      <AssemblyReference>System.Net.WebClient</AssemblyReference>
      <AssemblyReference>System.Net.Requests</AssemblyReference>
      <AssemblyReference>System.Net.ServicePoint</AssemblyReference>
      <AssemblyReference>System.Net.WebHeaderCollection</AssemblyReference>
      <AssemblyReference>System.ComponentModel.EventBasedAsync</AssemblyReference>
      <AssemblyReference>System.ComponentModel.Primitives</AssemblyReference>
      <AssemblyReference>System.CodeDom</AssemblyReference>
      <AssemblyReference>System.Threading.AccessControl</AssemblyReference>
      <AssemblyReference>System.Threading</AssemblyReference>
      <AssemblyReference>UiPath.Vision.Core</AssemblyReference>
      <AssemblyReference>UiPath.Excel</AssemblyReference>
      <AssemblyReference>UiPath.Mail.Activities</AssemblyReference>
      <AssemblyReference>UiPath.UIAutomationCore</AssemblyReference>
      <AssemblyReference>UiPath.Testing.Activities.Design</AssemblyReference>
      <AssemblyReference>UiPath.OCR.Core</AssemblyReference>
      <AssemblyReference>System.Threading.Tasks.Parallel</AssemblyReference>
      <AssemblyReference>System.Text.Encoding.CodePages</AssemblyReference>
      <AssemblyReference>System.Text.Encodings.Web</AssemblyReference>
      <AssemblyReference>System.Runtime.InteropServices</AssemblyReference>
      <AssemblyReference>System.Security.Claims</AssemblyReference>
      <AssemblyReference>System.Security.Cryptography.Pkcs</AssemblyReference>
      <AssemblyReference>System.Security.Cryptography.ProtectedData</AssemblyReference>
      <AssemblyReference>System.Private.DataContractSerialization</AssemblyReference>
      <AssemblyReference>System.Runtime.Serialization.Formatters</AssemblyReference>
      <AssemblyReference>System.Runtime.Serialization.Primitives</AssemblyReference>
      <AssemblyReference>System.Windows.Forms.Design</AssemblyReference>
      <AssemblyReference>System.Runtime.CompilerServices.VisualC</AssemblyReference>
      <AssemblyReference>System.Windows.Forms</AssemblyReference>
      <AssemblyReference>System.Resources.Writer</AssemblyReference>
      <AssemblyReference>System.Reflection.DispatchProxy</AssemblyReference>
      <AssemblyReference>System.Reflection.TypeExtensions</AssemblyReference>
      <AssemblyReference>System.Reflection.Metadata</AssemblyReference>
      <AssemblyReference>Microsoft.PowerShell.Commands.Diagnostics</AssemblyReference>
      <AssemblyReference>System.Diagnostics.FileVersionInfo</AssemblyReference>
      <AssemblyReference>System.Diagnostics.DiagnosticSource</AssemblyReference>
      <AssemblyReference>System.Diagnostics.TraceSource</AssemblyReference>
      <AssemblyReference>System.Diagnostics.EventLog</AssemblyReference>
      <AssemblyReference>System.Diagnostics.PerformanceCounter</AssemblyReference>
      <AssemblyReference>System.Diagnostics.TextWriterTraceListener</AssemblyReference>
      <AssemblyReference>System.Diagnostics.StackTrace</AssemblyReference>
      <AssemblyReference>System.Collections.Concurrent</AssemblyReference>
      <AssemblyReference>UiPath.Workflow</AssemblyReference>
      <AssemblyReference>System.Text.RegularExpressions</AssemblyReference>
      <AssemblyReference>UiPath.Studio.Constants</AssemblyReference>
      <AssemblyReference>netstandard</AssemblyReference>
      <AssemblyReference>System.Collections.Specialized</AssemblyReference>
      <AssemblyReference>UiPath.Web.Activities</AssemblyReference>
      <AssemblyReference>UiPath.UIAutomationNext</AssemblyReference>
      <AssemblyReference>UiPath.System.Activities.ViewModels</AssemblyReference>
      <AssemblyReference>UiPath.System.Activities.Design</AssemblyReference>
      <AssemblyReference>UiPath.IntelligentOCR.StudioWeb.Activities</AssemblyReference>
      <AssemblyReference>UiPath.DocumentProcessing.Contracts</AssemblyReference>
      <AssemblyReference>UiPath.IntelligentOCR</AssemblyReference>
      <AssemblyReference>System.Reflection.MetadataLoadContext</AssemblyReference>
      <AssemblyReference>Microsoft.VisualStudio.Validation</AssemblyReference>
      <AssemblyReference>UiPath.UIAutomationNext.Activities</AssemblyReference>
      <AssemblyReference>UiPath.Excel.Activities</AssemblyReference>
      <AssemblyReference>UiPath.OCR.Activities</AssemblyReference>
      <AssemblyReference>UiPath.Testing.Activities</AssemblyReference>
      <AssemblyReference>System.Private.Xml</AssemblyReference>
    </sco:Collection>
  </TextExpression.ReferencesForImplementation>
  <sap:WorkflowViewStateService.ViewState>
    <scg:Dictionary x:TypeArguments="x:String, x:Object">
      <x:Boolean x:Key="ShouldExpandAll">True</x:Boolean>
    </scg:Dictionary>
  </sap:WorkflowViewStateService.ViewState>
  <Sequence sap2010:Annotation.AnnotationText="" DisplayName="Main Sequence" sap:VirtualizedContainerService.HintSize="807.2,4304.8" sap2010:WorkflowViewState.IdRef="Sequence_1">
    <Sequence.Variables>
      <Variable x:TypeArguments="upr:ILocalResource" Name="downloadedFile" />
      <Variable x:TypeArguments="upr:ILocalResource" Name="Result" />
      <Variable x:TypeArguments="x:String" Name="isFileDownloaded" />
      <Variable x:TypeArguments="x:String" Name="ExcelFileOpened" />
      <Variable x:TypeArguments="x:Boolean" Name="isAssReportEmpty" />
      <Variable x:TypeArguments="x:Boolean" Name="isBiodataReportEmpty" />
      <Variable x:TypeArguments="x:String" Name="process_manager_path" />
    </Sequence.Variables>
    <sap:WorkflowViewStateService.ViewState>
      <scg:Dictionary x:TypeArguments="x:String, x:Object">
        <x:Boolean x:Key="IsExpanded">True</x:Boolean>
        <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
      </scg:Dictionary>
    </sap:WorkflowViewStateService.ViewState>
    <If Condition="[Not String.IsNullOrEmpty(config_path)]" sap:VirtualizedContainerService.HintSize="579.2,504" sap2010:WorkflowViewState.IdRef="If_2">
      <If.Then>
        <Sequence DisplayName="Then" sap:VirtualizedContainerService.HintSize="467.2,164.8" sap2010:WorkflowViewState.IdRef="Sequence_8">
          <sap:WorkflowViewStateService.ViewState>
            <scg:Dictionary x:TypeArguments="x:String, x:Object">
              <x:Boolean x:Key="IsExpanded">True</x:Boolean>
            </scg:Dictionary>
          </sap:WorkflowViewStateService.ViewState>
          <Assign sap:VirtualizedContainerService.HintSize="433.6,104.8" sap2010:WorkflowViewState.IdRef="Assign_2">
            <Assign.To>
              <OutArgument x:TypeArguments="x:String">[in_config_path]</OutArgument>
            </Assign.To>
            <Assign.Value>
              <InArgument x:TypeArguments="x:String">[config_path]</InArgument>
            </Assign.Value>
          </Assign>
        </Sequence>
      </If.Then>
      <If.Else>
        <Sequence DisplayName="Else" sap:VirtualizedContainerService.HintSize="416,168.8" sap2010:WorkflowViewState.IdRef="Sequence_9">
          <sap:WorkflowViewStateService.ViewState>
            <scg:Dictionary x:TypeArguments="x:String, x:Object">
              <x:Boolean x:Key="IsExpanded">True</x:Boolean>
            </scg:Dictionary>
          </sap:WorkflowViewStateService.ViewState>
          <ui:MessageBox Caption="{x:Null}" ChosenButton="{x:Null}" AutoCloseAfter="00:00:00" DisplayName="Message Box" sap:VirtualizedContainerService.HintSize="382.4,108.8" sap2010:WorkflowViewState.IdRef="MessageBox_9" Text="[&quot;the config path is emyty, the robot will use default config&quot;]" />
        </Sequence>
      </If.Else>
    </If>
    <ui:MessageBox Caption="{x:Null}" ChosenButton="{x:Null}" AutoCloseAfter="00:00:00" DisplayName="Message Box" sap:VirtualizedContainerService.HintSize="579.2,117.6" sap2010:WorkflowViewState.IdRef="MessageBox_10" Text="[&quot;the config path is in &quot; + in_config_path]" />
    <ui:ReadCell WorkbookPathResource="{x:Null}" Cell="B2" DisplayName="Get user name from config" sap:VirtualizedContainerService.HintSize="579.2,120" sap2010:WorkflowViewState.IdRef="ReadCell_1" SheetName="Settings" WorkbookPath="[in_config_path]">
      <ui:ReadCell.Result>
        <OutArgument x:TypeArguments="x:String">[user_name]</OutArgument>
      </ui:ReadCell.Result>
    </ui:ReadCell>
    <ui:ReadCell WorkbookPathResource="{x:Null}" Cell="B3" DisplayName="Get password from config" sap:VirtualizedContainerService.HintSize="579.2,120" sap2010:WorkflowViewState.IdRef="ReadCell_2" SheetName="Settings" WorkbookPath="[in_config_path]">
      <ui:ReadCell.Result>
        <OutArgument x:TypeArguments="x:String">[password]</OutArgument>
      </ui:ReadCell.Result>
    </ui:ReadCell>
    <ui:ReadCell WorkbookPathResource="{x:Null}" Cell="B4" DisplayName="Get process manager path from config" sap:VirtualizedContainerService.HintSize="579.2,120" sap2010:WorkflowViewState.IdRef="ReadCell_3" SheetName="Settings" WorkbookPath="[in_config_path]">
      <ui:ReadCell.Result>
        <OutArgument x:TypeArguments="x:String">[process_manager_path]</OutArgument>
      </ui:ReadCell.Result>
    </ui:ReadCell>
    <ui:CommentOut DisplayName="Comment Out" sap:VirtualizedContainerService.HintSize="579.2,898.4" sap2010:WorkflowViewState.IdRef="CommentOut_1">
      <ui:CommentOut.Body>
        <Sequence DisplayName="Ignored Activities" sap:VirtualizedContainerService.HintSize="544,788" sap2010:WorkflowViewState.IdRef="Sequence_7">
          <sap:WorkflowViewStateService.ViewState>
            <scg:Dictionary x:TypeArguments="x:String, x:Object">
              <x:Boolean x:Key="IsExpanded">True</x:Boolean>
            </scg:Dictionary>
          </sap:WorkflowViewStateService.ViewState>
          <ueab:ExcelApplicationCard Password="{x:Null}" SensitivityLabel="{x:Null}" DisplayName="Use Excel File" sap:VirtualizedContainerService.HintSize="510.4,728" sap2010:WorkflowViewState.IdRef="ExcelApplicationCard_1" ReadFormatting="Default" ResizeWindow="None" SensitivityOperation="None" WorkbookPath="data\Config.xlsx">
            <ueab:ExcelApplicationCard.Body>
              <ActivityAction x:TypeArguments="ue:IWorkbookQuickHandle">
                <ActivityAction.Argument>
                  <DelegateInArgument x:TypeArguments="ue:IWorkbookQuickHandle" Name="Excel" />
                </ActivityAction.Argument>
                <Sequence DisplayName="Do" sap:VirtualizedContainerService.HintSize="476.8,435.2" sap2010:WorkflowViewState.IdRef="Sequence_6">
                  <sap:WorkflowViewStateService.ViewState>
                    <scg:Dictionary x:TypeArguments="x:String, x:Object">
                      <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                    </scg:Dictionary>
                  </sap:WorkflowViewStateService.ViewState>
                  <ueab:ReadCellValueX Cell="[Excel.Sheet(&quot;Settings&quot;).Cell(&quot;B2&quot;)]" DisplayName="Read Cell Value" GetFormattedText="True" sap:VirtualizedContainerService.HintSize="443.2,192" sap2010:WorkflowViewState.IdRef="ReadCellValueX_2">
                    <ueab:ReadCellValueX.SaveTo>
                      <OutArgument x:TypeArguments="x:String">[user_name]</OutArgument>
                    </ueab:ReadCellValueX.SaveTo>
                  </ueab:ReadCellValueX>
                  <ueab:ReadCellValueX Cell="[Excel.Sheet(&quot;Settings&quot;).Cell(&quot;B3&quot;)]" DisplayName="Read Cell Value" GetFormattedText="True" sap:VirtualizedContainerService.HintSize="443.2,183.2" sap2010:WorkflowViewState.IdRef="ReadCellValueX_3">
                    <ueab:ReadCellValueX.SaveTo>
                      <OutArgument x:TypeArguments="x:String">[password]</OutArgument>
                    </ueab:ReadCellValueX.SaveTo>
                  </ueab:ReadCellValueX>
                </Sequence>
              </ActivityAction>
            </ueab:ExcelApplicationCard.Body>
          </ueab:ExcelApplicationCard>
        </Sequence>
      </ui:CommentOut.Body>
    </ui:CommentOut>
    <ui:MessageBox Caption="{x:Null}" ChosenButton="{x:Null}" AutoCloseAfter="00:00:00" DisplayName="Message Box" sap:VirtualizedContainerService.HintSize="579.2,117.6" sap2010:WorkflowViewState.IdRef="MessageBox_11" Text="[&quot;the username is &quot; + user_name]" />
    <ui:CommentOut DisplayName="Comment Out" sap:VirtualizedContainerService.HintSize="579.2,279.2" sap2010:WorkflowViewState.IdRef="CommentOut_3">
      <ui:CommentOut.Body>
        <Sequence DisplayName="Ignored Activities" sap:VirtualizedContainerService.HintSize="416,168.8" sap2010:WorkflowViewState.IdRef="Sequence_10">
          <sap:WorkflowViewStateService.ViewState>
            <scg:Dictionary x:TypeArguments="x:String, x:Object">
              <x:Boolean x:Key="IsExpanded">True</x:Boolean>
            </scg:Dictionary>
          </sap:WorkflowViewStateService.ViewState>
          <ui:MessageBox Caption="{x:Null}" ChosenButton="{x:Null}" AutoCloseAfter="00:00:00" DisplayName="Message Box" sap:VirtualizedContainerService.HintSize="382.4,108.8" sap2010:WorkflowViewState.IdRef="MessageBox_8" Text="[password]" />
        </Sequence>
      </ui:CommentOut.Body>
    </ui:CommentOut>
    <TryCatch DisplayName="Try Catch" sap:VirtualizedContainerService.HintSize="579.2,661.6" sap2010:WorkflowViewState.IdRef="TryCatch_1">
      <TryCatch.Try>
        <ui:InvokeCode ContinueOnError="{x:Null}" Code="' Step 1: Get the access token&#xA;Dim loginUrl As String = &quot;https://sso.starconnect.id/auth/realms/git/protocol/openid-connect/token&quot;&#xA;&#xA;Dim userNameInput As String = userNameArg&#xA;Dim passwordInput As String = passwordArg&#xA;&#xA;Dim payload As New NameValueCollection()&#xA;payload(&quot;grant_type&quot;) = &quot;password&quot;&#xA;payload(&quot;client_id&quot;) = &quot;git-client&quot;&#xA;payload(&quot;username&quot;) = userNameInput&#xA;payload(&quot;password&quot;) = passwordInput&#xA;&#xA;Dim client As New WebClient()&#xA;&#xA;Dim responseBytes As Byte() = client.UploadValues(loginUrl, &quot;POST&quot;, payload)&#xA;Dim responseBody As String = Encoding.UTF8.GetString(responseBytes)&#xA;&#xA; ' Parse the responseBody to get the access_toke&#xA;Dim jsonResponse As JObject = JObject.Parse(responseBody)&#xA;Dim accessToken As String = jsonResponse(&quot;access_token&quot;).ToString()&#xA;&#xA;accessTokenArg = accessToken&#xA;&#xA;Dim profileUrl As String = &quot;https://ng-api-demo.gitsolutions.id/api/user/profile&quot;&#xA;&#xA;client.Headers(HttpRequestHeader.Authorization) = &quot;Bearer &quot; &amp; accessToken&#xA;client.Headers.Add(&quot;x-tenantid&quot;, &quot;004416ec-37b0-49b4-9bf1-d26dde3b81a6&quot;)&#xA;&#xA;Try&#xA;    Dim profileResponseBytes As Byte() = client.DownloadData(profileUrl)&#xA;    Dim profileResponseBody As String = Encoding.UTF8.GetString(profileResponseBytes)&#xA;&#xA;    ' Parse the profileResponseBody to get the authoritiesToken&#xA;    Dim profileJsonResponse As JObject = JObject.Parse(profileResponseBody)&#xA;    Dim authoritiesToken As String = profileJsonResponse(&quot;authoritiesToken&quot;).ToString()&#xA;&#xA;    authoritiesTokenArg = authoritiesToken&#xA;Catch ex As WebException&#xA;    Dim errorResponse As String = New StreamReader(ex.Response.GetResponseStream()).ReadToEnd()&#xA;    System.Console.WriteLine(&quot;Error: &quot; &amp; errorResponse)&#xA;End Try" DisplayName="get tokens" sap:VirtualizedContainerService.HintSize="333.6,164.8" sap2010:WorkflowViewState.IdRef="InvokeCode_3">
          <ui:InvokeCode.Arguments>
            <OutArgument x:TypeArguments="x:String" x:Key="accessTokenArg">[access_token_arg]</OutArgument>
            <OutArgument x:TypeArguments="x:String" x:Key="authoritiesTokenArg">[profile_token_arg]</OutArgument>
            <InArgument x:TypeArguments="x:String" x:Key="userNameArg">[user_name]</InArgument>
            <InArgument x:TypeArguments="x:String" x:Key="passwordArg">[password]</InArgument>
          </ui:InvokeCode.Arguments>
        </ui:InvokeCode>
      </TryCatch.Try>
      <TryCatch.Catches>
        <Catch x:TypeArguments="sr:TargetInvocationException" sap:VirtualizedContainerService.HintSize="440,152.8" sap2010:WorkflowViewState.IdRef="Catch`1_1">
          <sap:WorkflowViewStateService.ViewState>
            <scg:Dictionary x:TypeArguments="x:String, x:Object">
              <x:Boolean x:Key="IsExpanded">False</x:Boolean>
              <x:Boolean x:Key="IsPinned">False</x:Boolean>
            </scg:Dictionary>
          </sap:WorkflowViewStateService.ViewState>
          <ActivityAction x:TypeArguments="sr:TargetInvocationException">
            <ActivityAction.Argument>
              <DelegateInArgument x:TypeArguments="sr:TargetInvocationException" Name="exception" />
            </ActivityAction.Argument>
            <Assign sap:VirtualizedContainerService.HintSize="433.6,81.6" sap2010:WorkflowViewState.IdRef="Assign_1">
              <Assign.To>
                <OutArgument x:TypeArguments="x:String">[access_token_arg]</OutArgument>
              </Assign.To>
              <Assign.Value>
                <InArgument x:TypeArguments="x:String">[Nothing]</InArgument>
              </Assign.Value>
            </Assign>
          </ActivityAction>
        </Catch>
      </TryCatch.Catches>
    </TryCatch>
    <If Condition="[String.IsNullOrEmpty(access_token_arg)]" DisplayName="If access_token_arg is empty" sap:VirtualizedContainerService.HintSize="579.2,485.6" sap2010:WorkflowViewState.IdRef="If_1">
      <If.Then>
        <Sequence DisplayName="Then" sap:VirtualizedContainerService.HintSize="416,225.6" sap2010:WorkflowViewState.IdRef="Sequence_4">
          <sap:WorkflowViewStateService.ViewState>
            <scg:Dictionary x:TypeArguments="x:String, x:Object">
              <x:Boolean x:Key="IsExpanded">True</x:Boolean>
            </scg:Dictionary>
          </sap:WorkflowViewStateService.ViewState>
          <ui:MessageBox Caption="{x:Null}" ChosenButton="{x:Null}" AutoCloseAfter="00:00:00" DisplayName="Message Box" sap:VirtualizedContainerService.HintSize="382.4,117.6" sap2010:WorkflowViewState.IdRef="MessageBox_1" Text="[&quot;Error: User name or password is invalid&quot;]" />
          <uasb:EndBusinessOperation DisplayName="End process" sap:VirtualizedContainerService.HintSize="382.4,48" sap2010:WorkflowViewState.IdRef="EndBusinessOperation_2" />
        </Sequence>
      </If.Then>
      <If.Else>
        <Sequence DisplayName="Else" sap:VirtualizedContainerService.HintSize="416,89.6" sap2010:WorkflowViewState.IdRef="Sequence_5">
          <sap:WorkflowViewStateService.ViewState>
            <scg:Dictionary x:TypeArguments="x:String, x:Object">
              <x:Boolean x:Key="IsExpanded">True</x:Boolean>
            </scg:Dictionary>
          </sap:WorkflowViewStateService.ViewState>
        </Sequence>
      </If.Else>
    </If>
    <ui:InvokeCode ContinueOnError="{x:Null}" Code="Dim accessToken As String &#xA;Dim profileToken As String&#xA;&#xA;accessToken = accessTokenArg&#xA;profileToken = profileTokenArg&#xA;&#xA;Dim url As String = &quot;https://ng-api-demo.gitsolutions.id/api/admin/tools/proccess-manager&quot;&#xA;Dim today As DateTime = DateTime.Now&#xA;Dim effectiveDate As String = today.ToString(&quot;yyyy-MM-dd&quot;)&#xA;Dim description As String = today.ToString(&quot;dd-MMM-yyyy&quot;)&#xA;Dim payload As New Dictionary(Of String, Object) From {&#xA;    {&quot;processName&quot;,  &quot;RPT_ASSIGNMENT&quot;},&#xA;    {&quot;isProcessManager&quot;, True},&#xA;    {&quot;param&quot;, New List(Of Dictionary(Of String, Object)) From {&#xA;        New Dictionary(Of String, Object) From {{&quot;name&quot;, &quot;locationGroupId&quot;}, {&quot;value&quot;, Nothing}, {&quot;label&quot;, &quot;Location Group&quot;}, {&quot;description&quot;, Nothing}, {&quot;visible&quot;, True}},&#xA;        New Dictionary(Of String, Object) From {{&quot;name&quot;, &quot;companyId&quot;}, {&quot;value&quot;, Nothing}, {&quot;label&quot;, &quot;Company&quot;}, {&quot;description&quot;, Nothing}, {&quot;visible&quot;, True}},&#xA;        New Dictionary(Of String, Object) From {{&quot;name&quot;, &quot;organizationLevelId&quot;}, {&quot;value&quot;, Nothing}, {&quot;label&quot;, &quot;Organization Level&quot;}, {&quot;description&quot;, Nothing}, {&quot;visible&quot;, True}},&#xA;        New Dictionary(Of String, Object) From {{&quot;name&quot;, &quot;organizationId&quot;}, {&quot;value&quot;, Nothing}, {&quot;label&quot;, &quot;Organization&quot;}, {&quot;description&quot;, Nothing}, {&quot;visible&quot;, True}},&#xA;        New Dictionary(Of String, Object) From {{&quot;name&quot;, &quot;jobFamilyId&quot;}, {&quot;value&quot;, Nothing}, {&quot;label&quot;, &quot;Job Family&quot;}, {&quot;description&quot;, Nothing}, {&quot;visible&quot;, True}},&#xA;        New Dictionary(Of String, Object) From {{&quot;name&quot;, &quot;jobId&quot;}, {&quot;value&quot;, Nothing}, {&quot;label&quot;, &quot;Job&quot;}, {&quot;description&quot;, Nothing}, {&quot;visible&quot;, True}},&#xA;        New Dictionary(Of String, Object) From {{&quot;name&quot;, &quot;locationId&quot;}, {&quot;value&quot;, Nothing}, {&quot;label&quot;, &quot;Location&quot;}, {&quot;description&quot;, Nothing}, {&quot;visible&quot;, True}},&#xA;        New Dictionary(Of String, Object) From {{&quot;name&quot;, &quot;positionLevelId&quot;}, {&quot;value&quot;, Nothing}, {&quot;label&quot;, &quot;Position Level&quot;}, {&quot;description&quot;, Nothing}, {&quot;visible&quot;, True}},&#xA;        New Dictionary(Of String, Object) From {{&quot;name&quot;, &quot;employmentId&quot;}, {&quot;value&quot;, Nothing}, {&quot;label&quot;, &quot;Employee&quot;}, {&quot;description&quot;, Nothing}, {&quot;visible&quot;, True}},&#xA;        New Dictionary(Of String, Object) From {{&quot;name&quot;, &quot;userGroup&quot;}, {&quot;value&quot;, Nothing}, {&quot;label&quot;, &quot;User&quot;}, {&quot;description&quot;, Nothing}},&#xA;        New Dictionary(Of String, Object) From {{&quot;name&quot;, &quot;managerEmploymentId&quot;}, {&quot;value&quot;, Nothing}, {&quot;label&quot;, &quot;Manager&quot;}, {&quot;description&quot;, Nothing}, {&quot;visible&quot;, True}},&#xA;        New Dictionary(Of String, Object) From {{&quot;name&quot;, &quot;effectiveDate&quot;}, {&quot;value&quot;, effectiveDate}, {&quot;label&quot;, &quot;As Of Date&quot;}, {&quot;description&quot;, description}, {&quot;visible&quot;, True}},&#xA;        New Dictionary(Of String, Object) From {{&quot;name&quot;, &quot;terminationPeriod&quot;}, {&quot;value&quot;, Nothing}, {&quot;label&quot;, &quot;Termination Period&quot;}, {&quot;description&quot;, Nothing}, {&quot;visible&quot;, True}},&#xA;        New Dictionary(Of String, Object) From {{&quot;name&quot;, &quot;hirePeriod&quot;}, {&quot;value&quot;, Nothing}, {&quot;label&quot;, &quot;Hire Period&quot;}, {&quot;description&quot;, Nothing}, {&quot;visible&quot;, True}},&#xA;        New Dictionary(Of String, Object) From {{&quot;name&quot;, &quot;active&quot;}, {&quot;value&quot;, Nothing}, {&quot;label&quot;, &quot;Active&quot;}, {&quot;description&quot;, Nothing}, {&quot;visible&quot;, True}}&#xA;    }}&#xA;}&#xA;Dim payloadJson As String = JsonConvert.SerializeObject(payload)&#xA;Dim payloadBytes As Byte() = Encoding.UTF8.GetBytes(payloadJson)&#xA;Dim request As HttpWebRequest = CType(WebRequest.Create(url), HttpWebRequest)&#xA;request.Method = &quot;POST&quot;&#xA;request.ContentType = &quot;application/json&quot;&#xA;request.Headers(&quot;Authorization&quot;) = &quot;Bearer &quot; &amp; accessToken&#xA;request.Headers(&quot;authorizationtoken&quot;) = profileToken&#xA;request.Headers(&quot;x-tenantid&quot;) = &quot;004416ec-37b0-49b4-9bf1-d26dde3b81a6&quot;&#xA;Using requestStream As Stream = request.GetRequestStream()&#xA;    requestStream.Write(payloadBytes, 0, payloadBytes.Length)&#xA;End Using&#xA;Try&#xA;    Dim response As HttpWebResponse = CType(request.GetResponse(), HttpWebResponse)&#xA;    Using responseStream As Stream = response.GetResponseStream()&#xA;        Using reader As New StreamReader(responseStream)&#xA;            Dim responseBody As String = reader.ReadToEnd()&#xA;            Dim result As Dictionary(Of String, Object) = JsonConvert.DeserializeObject(Of Dictionary(Of String, Object))(responseBody)&#xA;            If result.ContainsKey(&quot;message&quot;) Then&#xA;                Dim message As String = result(&quot;message&quot;).ToString()&#xA;               &#x9;System.Console.WriteLine(&quot;Message: &quot; &amp; message)&#xA;            Else&#xA;                System.Console.WriteLine(&quot;Unexpected response format&quot;)&#xA;            End If&#xA;        End Using&#xA;    End Using&#xA;Catch ex As WebException&#xA;    Using errorResponse As HttpWebResponse = CType(ex.Response, HttpWebResponse)&#xA;        Using errorStream As Stream = errorResponse.GetResponseStream()&#xA;            Using reader As New StreamReader(errorStream)&#xA;                Dim errorBody As String = reader.ReadToEnd()&#xA;                System.Console.WriteLine(&quot;Error: &quot; &amp; errorBody)&#xA;            End Using&#xA;        End Using&#xA;    End Using&#xA;End Try" DisplayName="post assignment report" sap:VirtualizedContainerService.HintSize="579.2,196.8" sap2010:WorkflowViewState.IdRef="InvokeCode_8">
      <ui:InvokeCode.Arguments>
        <InArgument x:TypeArguments="x:String" x:Key="accessTokenArg">[access_token_arg]</InArgument>
        <InArgument x:TypeArguments="x:String" x:Key="profileTokenArg">[profile_token_arg]</InArgument>
      </ui:InvokeCode.Arguments>
    </ui:InvokeCode>
    <ui:InvokeCode ContinueOnError="{x:Null}" Code="Dim accessToken As String &#xA;Dim profileToken As String&#xA;&#xA;accessToken = accessTokenArg&#xA;profileToken = profileTokenArg&#xA;&#xA;Dim url As String = &quot;https://ng-api-demo.gitsolutions.id/api/admin/tools/proccess-manager&quot;&#xA;Dim today As DateTime = DateTime.Now&#xA;Dim effectiveDate As String = today.ToString(&quot;yyyy-MM-dd&quot;)&#xA;Dim description As String = today.ToString(&quot;dd-MMM-yyyy&quot;)&#xA;Dim payload As New Dictionary(Of String, Object) From {&#xA;    {&quot;processName&quot;,  &quot;RPT_BIODATA&quot;},&#xA;    {&quot;isProcessManager&quot;, True},&#xA;    {&quot;param&quot;, New List(Of Dictionary(Of String, Object)) From {&#xA;        New Dictionary(Of String, Object) From {{&quot;name&quot;, &quot;locationGroupId&quot;}, {&quot;value&quot;, Nothing}, {&quot;label&quot;, &quot;Location Group&quot;}, {&quot;description&quot;, Nothing}, {&quot;visible&quot;, True}},&#xA;        New Dictionary(Of String, Object) From {{&quot;name&quot;, &quot;companyId&quot;}, {&quot;value&quot;, Nothing}, {&quot;label&quot;, &quot;Company&quot;}, {&quot;description&quot;, Nothing}, {&quot;visible&quot;, True}},&#xA;        New Dictionary(Of String, Object) From {{&quot;name&quot;, &quot;organizationLevelId&quot;}, {&quot;value&quot;, Nothing}, {&quot;label&quot;, &quot;Organization Level&quot;}, {&quot;description&quot;, Nothing}, {&quot;visible&quot;, True}},&#xA;        New Dictionary(Of String, Object) From {{&quot;name&quot;, &quot;organizationId&quot;}, {&quot;value&quot;, Nothing}, {&quot;label&quot;, &quot;Organization&quot;}, {&quot;description&quot;, Nothing}, {&quot;visible&quot;, True}},&#xA;        New Dictionary(Of String, Object) From {{&quot;name&quot;, &quot;jobFamilyId&quot;}, {&quot;value&quot;, Nothing}, {&quot;label&quot;, &quot;Job Family&quot;}, {&quot;description&quot;, Nothing}, {&quot;visible&quot;, True}},&#xA;        New Dictionary(Of String, Object) From {{&quot;name&quot;, &quot;jobId&quot;}, {&quot;value&quot;, Nothing}, {&quot;label&quot;, &quot;Job&quot;}, {&quot;description&quot;, Nothing}, {&quot;visible&quot;, True}},&#xA;        New Dictionary(Of String, Object) From {{&quot;name&quot;, &quot;locationId&quot;}, {&quot;value&quot;, Nothing}, {&quot;label&quot;, &quot;Location&quot;}, {&quot;description&quot;, Nothing}, {&quot;visible&quot;, True}},&#xA;        New Dictionary(Of String, Object) From {{&quot;name&quot;, &quot;positionLevelId&quot;}, {&quot;value&quot;, Nothing}, {&quot;label&quot;, &quot;Position Level&quot;}, {&quot;description&quot;, Nothing}, {&quot;visible&quot;, True}},&#xA;        New Dictionary(Of String, Object) From {{&quot;name&quot;, &quot;employmentId&quot;}, {&quot;value&quot;, Nothing}, {&quot;label&quot;, &quot;Employee&quot;}, {&quot;description&quot;, Nothing}, {&quot;visible&quot;, True}},&#xA;        New Dictionary(Of String, Object) From {{&quot;name&quot;, &quot;userGroup&quot;}, {&quot;value&quot;, Nothing}, {&quot;label&quot;, &quot;User&quot;}, {&quot;description&quot;, Nothing}},&#xA;        New Dictionary(Of String, Object) From {{&quot;name&quot;, &quot;managerEmploymentId&quot;}, {&quot;value&quot;, Nothing}, {&quot;label&quot;, &quot;Manager&quot;}, {&quot;description&quot;, Nothing}, {&quot;visible&quot;, True}},&#xA;        New Dictionary(Of String, Object) From {{&quot;name&quot;, &quot;effectiveDate&quot;}, {&quot;value&quot;, effectiveDate}, {&quot;label&quot;, &quot;As Of Date&quot;}, {&quot;description&quot;, description}, {&quot;visible&quot;, True}},&#xA;        New Dictionary(Of String, Object) From {{&quot;name&quot;, &quot;terminationPeriod&quot;}, {&quot;value&quot;, Nothing}, {&quot;label&quot;, &quot;Termination Period&quot;}, {&quot;description&quot;, Nothing}, {&quot;visible&quot;, True}},&#xA;        New Dictionary(Of String, Object) From {{&quot;name&quot;, &quot;hirePeriod&quot;}, {&quot;value&quot;, Nothing}, {&quot;label&quot;, &quot;Hire Period&quot;}, {&quot;description&quot;, Nothing}, {&quot;visible&quot;, True}},&#xA;        New Dictionary(Of String, Object) From {{&quot;name&quot;, &quot;active&quot;}, {&quot;value&quot;, Nothing}, {&quot;label&quot;, &quot;Active&quot;}, {&quot;description&quot;, Nothing}, {&quot;visible&quot;, True}}&#xA;    }}&#xA;}&#xA;Dim payloadJson As String = JsonConvert.SerializeObject(payload)&#xA;Dim payloadBytes As Byte() = Encoding.UTF8.GetBytes(payloadJson)&#xA;Dim request As HttpWebRequest = CType(WebRequest.Create(url), HttpWebRequest)&#xA;request.Method = &quot;POST&quot;&#xA;request.ContentType = &quot;application/json&quot;&#xA;request.Headers(&quot;Authorization&quot;) = &quot;Bearer &quot; &amp; accessToken&#xA;request.Headers(&quot;authorizationtoken&quot;) = profileToken&#xA;request.Headers(&quot;x-tenantid&quot;) = &quot;004416ec-37b0-49b4-9bf1-d26dde3b81a6&quot;&#xA;Using requestStream As Stream = request.GetRequestStream()&#xA;    requestStream.Write(payloadBytes, 0, payloadBytes.Length)&#xA;End Using&#xA;Try&#xA;    Dim response As HttpWebResponse = CType(request.GetResponse(), HttpWebResponse)&#xA;    Using responseStream As Stream = response.GetResponseStream()&#xA;        Using reader As New StreamReader(responseStream)&#xA;            Dim responseBody As String = reader.ReadToEnd()&#xA;            Dim result As Dictionary(Of String, Object) = JsonConvert.DeserializeObject(Of Dictionary(Of String, Object))(responseBody)&#xA;            If result.ContainsKey(&quot;message&quot;) Then&#xA;                Dim message As String = result(&quot;message&quot;).ToString()&#xA;               &#x9;System.Console.WriteLine(&quot;Message: &quot; &amp; message)&#xA;            Else&#xA;                System.Console.WriteLine(&quot;Unexpected response format&quot;)&#xA;            End If&#xA;        End Using&#xA;    End Using&#xA;Catch ex As WebException&#xA;    Using errorResponse As HttpWebResponse = CType(ex.Response, HttpWebResponse)&#xA;        Using errorStream As Stream = errorResponse.GetResponseStream()&#xA;            Using reader As New StreamReader(errorStream)&#xA;                Dim errorBody As String = reader.ReadToEnd()&#xA;                System.Console.WriteLine(&quot;Error: &quot; &amp; errorBody)&#xA;            End Using&#xA;        End Using&#xA;    End Using&#xA;End Try" DisplayName="post biodata report" sap:VirtualizedContainerService.HintSize="579.2,196.8" sap2010:WorkflowViewState.IdRef="InvokeCode_9">
      <ui:InvokeCode.Arguments>
        <InArgument x:TypeArguments="x:String" x:Key="accessTokenArg">[access_token_arg]</InArgument>
        <InArgument x:TypeArguments="x:String" x:Key="profileTokenArg">[profile_token_arg]</InArgument>
      </ui:InvokeCode.Arguments>
    </ui:InvokeCode>
    <ui:InvokeCode ContinueOnError="{x:Null}" Code="Dim accessToken As String = accessTokenArg&#xA;Dim profileToken As String = profileTokenArg&#xA;Dim biodataReportUrl As String = &quot;&quot;&#xA;Dim assignmentReportUrl As String = &quot;&quot;&#xA;&#xA;Dim url As String = &quot;https://ng-api-demo.gitsolutions.id/api/admin/tools/proccess-manager?isProcessManager=true&amp;page=0&amp;size=10&quot;&#xA;Dim client As New WebClient()&#xA;&#xA;Do&#xA;    client.Headers(HttpRequestHeader.Authorization) = &quot;Bearer &quot; &amp; accessToken&#xA;    client.Headers.Add(&quot;authorizationtoken&quot;, profileToken)&#xA;    client.Headers.Add(&quot;x-tenantid&quot;, &quot;004416ec-37b0-49b4-9bf1-d26dde3b81a6&quot;)&#xA;&#xA;    Try&#xA;        Dim responseBytes As Byte() = client.DownloadData(url)&#xA;        If responseBytes Is Nothing OrElse responseBytes.Length = 0 Then&#xA;            System.Console.WriteLine(&quot;Empty response bytes&quot;)&#xA;            Exit Do&#xA;        End If&#xA;&#xA;        Dim responseBody As String = Encoding.UTF8.GetString(responseBytes)&#xA;        System.Console.WriteLine(&quot;Response: &quot; &amp; responseBody)&#xA;&#xA;        If String.IsNullOrEmpty(responseBody) Then&#xA;            System.Console.WriteLine(&quot;Empty response body&quot;)&#xA;            Exit Do&#xA;        End If&#xA;&#xA;        Dim result As JObject = JObject.Parse(responseBody)&#xA;        Dim data As JArray = TryCast(result(&quot;data&quot;), JArray)&#xA;&#xA;        If data Is Nothing Then&#xA;            System.Console.WriteLine(&quot;Unexpected response format&quot;)&#xA;            Exit Do&#xA;        End If&#xA;&#xA;        ' Get upper biodata report url&#xA;        For Each item As JObject In data&#xA;            Dim name As String = item(&quot;name&quot;).ToString()&#xA;            Dim status As String = item(&quot;status&quot;).ToString()&#xA;            Dim reportUrl As String = If(item(&quot;reportUrl&quot;) IsNot Nothing, item(&quot;reportUrl&quot;).ToString(), &quot;&quot;)&#xA;&#xA;            If status &lt;&gt; &quot;Completed&quot; AndAlso name = &quot;Biodata Report&quot; Then&#xA;                biodataReportUrl = &quot;&quot;&#xA;                Exit For&#xA;            ElseIf name = &quot;Biodata Report&quot; Then&#xA;                biodataReportUrl = reportUrl&#xA;                Exit For&#xA;            End If&#xA;        Next&#xA;&#xA;        ' Get upper assignment report url&#xA;        For Each item As JObject In data&#xA;            Dim name As String = item(&quot;name&quot;).ToString()&#xA;            Dim status As String = item(&quot;status&quot;).ToString()&#xA;            Dim reportUrl As String = If(item(&quot;reportUrl&quot;) IsNot Nothing, item(&quot;reportUrl&quot;).ToString(), &quot;&quot;)&#xA;&#xA;            If status &lt;&gt; &quot;Completed&quot; AndAlso name = &quot;Assignment Report&quot; Then&#xA;                assignmentReportUrl = &quot;&quot;&#xA;                Exit For&#xA;            ElseIf name = &quot;Assignment Report&quot; Then&#xA;                assignmentReportUrl = reportUrl&#xA;                Exit For&#xA;            End If&#xA;        Next&#xA;&#xA;        If biodataReportUrl &lt;&gt; &quot;&quot; AndAlso assignmentReportUrl &lt;&gt; &quot;&quot; Then&#xA;            System.Console.WriteLine(&quot;Biodata Report URL: &quot; &amp; biodataReportUrl)&#xA;            System.Console.WriteLine(&quot;Assignment Report URL: &quot; &amp; assignmentReportUrl)&#xA;            Exit Do&#xA;        End If&#xA;&#xA;    Catch ex As WebException&#xA;        Dim errorResponse As String = New StreamReader(ex.Response.GetResponseStream()).ReadToEnd()&#xA;        System.Console.WriteLine(&quot;Error: &quot; &amp; errorResponse)&#xA;        Exit Do&#xA;    Catch ex As Exception&#xA;        System.Console.WriteLine(&quot;Unexpected error: &quot; &amp; ex.Message)&#xA;        Exit Do&#xA;    End Try&#xA;&#xA;    Thread.Sleep(100)&#xA;Loop&#xA;&#xA;assignmentReportUrlArg = assignmentReportUrl&#xA;biodataReportUrlArg = biodataReportUrl" DisplayName="get report url" sap:VirtualizedContainerService.HintSize="579.2,196.8" sap2010:WorkflowViewState.IdRef="InvokeCode_7">
      <ui:InvokeCode.Arguments>
        <InArgument x:TypeArguments="x:String" x:Key="accessTokenArg">[access_token_arg]</InArgument>
        <InArgument x:TypeArguments="x:String" x:Key="profileTokenArg">[profile_token_arg]</InArgument>
        <OutArgument x:TypeArguments="x:String" x:Key="biodataReportUrlArg">[biodata_report_url_arg]</OutArgument>
        <OutArgument x:TypeArguments="x:String" x:Key="assignmentReportUrlArg">[assignment_report_url_arg]</OutArgument>
      </ui:InvokeCode.Arguments>
    </ui:InvokeCode>
    <uasf:DownloadFileFromUrl ResponseAttachment="{x:Null}" Timeout="{x:Null}" ConflictResolution="[UiPath.Activities.System.FileOperations.FileConflictBehavior.Replace]" DisplayName="Download biodata report" FileName="[process_manager_path + &quot;/&quot; + biodataReportDown]" sap:VirtualizedContainerService.HintSize="579.2,122.4" sap2010:WorkflowViewState.IdRef="DownloadFileFromUrl_2" Url="[biodata_report_url_arg]" />
    <uasf:DownloadFileFromUrl ResponseAttachment="{x:Null}" Timeout="{x:Null}" ConflictResolution="[UiPath.Activities.System.FileOperations.FileConflictBehavior.Replace]" DisplayName="Download assignment report" FileName="[process_manager_path + &quot;/&quot; + assReportDown]" sap:VirtualizedContainerService.HintSize="579.2,113.6" sap2010:WorkflowViewState.IdRef="DownloadFileFromUrl_5" Url="[assignment_report_url_arg]" />
  </Sequence>
</Activity>